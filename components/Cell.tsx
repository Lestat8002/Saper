import React from 'react';
import type { Cell as CellType } from '../utils/types';
import { CELL_NUMBER_COLORS } from './constants';

interface CellProps {
  cell: CellType;
  onClick: (row: number, col: number) => void;
  onContextMenu: (e: React.MouseEvent<HTMLElement>, row: number, col: number) => void;
}

const Cell: React.FC<CellProps> = ({ cell, onClick, onContextMenu }) => {
  const { row, col, isRevealed, isMine, isFlagged, isQuestioned, adjacentMines } = cell;

  const getCellContent = (): React.ReactNode => {
    if (isFlagged) return 'üö©';
    if (isQuestioned) return <span className="font-bold text-yellow-300">?</span>;

    if (isRevealed) {
        if (isMine) return 'üí£';
        if (adjacentMines > 0) {
            return <span className={`font-bold ${CELL_NUMBER_COLORS[adjacentMines]} [text-shadow:0_1px_3px_rgba(0,0,0,0.9)]`}>{adjacentMines}</span>;
        }
    }
    return null; // –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, –µ—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞ –∏ –±–µ–∑ –æ—Ç–º–µ—Ç–æ–∫
  };
  
  const baseClasses = 'w-8 h-8 md:w-10 md:h-10 flex items-center justify-center text-xl select-none transition-all duration-200';
  let cellClasses = '';

  if (!isRevealed) {
      // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–µ—Ä–∞—Å–∫—Ä—ã—Ç—ã–µ —è—á–µ–π–∫–∏ —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ, —á—Ç–æ–±—ã —Ñ–æ–Ω –±—ã–ª –≤–∏–¥–µ–Ω.
      cellClasses = 'bg-slate-500/40 backdrop-blur-sm hover:bg-slate-400/50 border-t-2 border-l-2 border-slate-400/60 active:border-0';
      if (isFlagged || isQuestioned) {
        cellClasses += ' text-2xl';
      }
  } else {
      if (isMine) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –∏ —Å—é–¥–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        cellClasses = 'bg-red-600/70 backdrop-blur-sm';
      } else {
        // –§–æ–Ω –¥–ª—è –ø—É—Å—Ç—ã—Ö —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö —è—á–µ–µ–∫ - –µ—â–µ –±–æ–ª–µ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        cellClasses = 'bg-slate-900/30 backdrop-blur-sm';
      }
  }

  return (
    <button
      className={`${baseClasses} ${cellClasses}`}
      onClick={() => onClick(row, col)}
      onContextMenu={(e) => onContextMenu(e, row, col)}
      disabled={isRevealed}
      aria-label={`–Ø—á–µ–π–∫–∞ ${row+1}, ${col+1}`}
    >
      {getCellContent()}
    </button>
  );
};

export default Cell;